class Game {
    field Player player1, player2, currentPlayer;
    field Array gameField;
    field int enter, skip, up, down, left, right;
    field int moveCount;
    field Random rnd;

    constructor Game new(int seed) {
        var int i;
        var Cell cursor1, cursor2;

        let enter = 128;
        let skip = 83;
        let left = 130;
        let up = 131;
        let right = 132;
        let down = 133;

        let moveCount = 0;
        let rnd = Random.new(seed);

        let player1 = Player.new(false);
        let player2 = Player.new(true);
        let currentPlayer = player1;

        let gameField = Array.new(Consts.rows());

        let i = 0;
        while (i < Consts.rows()) {
            let gameField[i] = Array.new(Consts.columns());

            let i = i + 1;
        }

        do FieldPainter.drawEmptyField();

        let cursor1 = player1.getCursor();
        let cursor2 = player2.getCursor();
        do FieldPainter.drawCross(cursor1.getRow(), cursor1.getColumn());
        do FieldPainter.drawRect(cursor2.getRow(), cursor2.getColumn());

        return this;
    }

    method void start() {

        while (~isGameFinished()) {
            do doMove();
        }

        return;
    }

    method boolean isGameFinished() {
        return isPlayerWin(player1) | isPlayerWin(player2);
    }

    method boolean isPlayerWin(Player p) {
        var int totalScore;
        let totalScore = Consts.rows() * Consts.columns();
        return p.getScore() > (totalScore / 2);
    }

    method void doMove() {
        var Cell selected1, selected2;
        var int dice1, dice2, keyPressed, selectedCount;

        let dice1 = rnd.next(6) + 1;
        let dice2 = rnd.next(6) + 1;

        do drawDices(dice1, dice2);

        while (true) {
            let keyPressed = Player.getKeyPressed();

            if (key = enter) {
                var Cell curCell;
                let curCell = currentPlayer.getCursor();
                if (isCellEmpty(curCell))
                return currentPlayer.getCursor();
            }

            if (key = left) {
                do currentPlayer.move(0, -1);
			}
			if (key = up) {
                do currentPlayer.move(-1, 0);
			}
			if (key = right) {
                do currentPlayer.move(0, 1);
			}
			if (key = down) {
                do currentPlayer.move(1, 0);
			}
        }

        return;
    }

    method void drawDices(int dice1, int dice2) {
        do Menu.drawCubeNumber(0, dice1);
        do Menu.drawCubeNumber(1, dice2);

        return;
    }

    method boolean isCellEmpty(Cell cell) {
        var Array column;
        let row = gameField[cell.getRow()];
        return row[cell.getColumn()] = 0;
    }
}