class Game {
    field Player player1, player2, currentPlayer;
    field Array gameField;
    field int enter, skip, up, down, left, right;
    field int moveCount;
    field Random rnd;

    constructor Game new(int seed) {
        var int i;

        let enter = 128;
        let skip = 83;
        let left = 130;
        let up = 131;
        let right = 132;
        let down = 133;

        let moveCount = 0;
        let rnd = Random.new(seed);

        let player1 = Player.new(1);
        let player2 = Player.new(2);
        let currentPlayer = player1;

        let gameField = Array.new(Consts.rows());

        let i = 0;
        while (i < Consts.rows()) {
            let gameField[i] = Array.new(Consts.columns());
            let i = i + 1;
        }

        do FieldPainter.drawEmptyField();

        return this;
    }

    method void start() {
        var int dice1, dice2;
        var Cell cursor;
        
        while (~isGameFinished()) {
            let dice1 = rnd.next(6) + 1;
            let dice2 = rnd.next(6) + 1;
            do drawDices(dice1, dice2);

            let cursor = currentPlayer.getCursor();
            do FieldPainter.drawColor(cursor.getRow(), cursor.getColumn(), true);

            do makeTurn();

            if (currentPlayer.getPlayerNum() = 1) {
                let currentPlayer = player2;
            } else {
                let currentPlayer = player1;
            }

            do Sys.wait(200);
        }

        return;
    }

    method void createTerritory(Cell c1, Cell c2) {
        var int i1, i2, j1, j2, j;
        var int color;
        var Array row;

        if (c1.getRow() > c2.getRow()) {
            let i1 = c2.getRow();
            let i2 = c1.getRow();
        } else {
            let i1 = c1.getRow();
            let i2 = c2.getRow();
        }

        if (c1.getColumn() > c2.getColumn()) {
            let j1 = c2.getColumn();
            let j2 = c1.getColumn();
        } else {
            let j1 = c1.getColumn();
            let j2 = c2.getColumn();
        }

        do currentPlayer.addScore((i2 - i1 + 1) * (j2 - j1 + 1));

        let color = currentPlayer.getPlayerNum();

        while (i1 < (i2 + 1)) {
            let row = gameField[i1];
            let j = j1;
            while (j < (j2 + 1)) {
                let row[j] = color;
                do FieldPainter.drawTerritory(i1, j, color);
                let j = j + 1;
            }
            let i1 = i1 + 1;
        }

        return;
    }

    method boolean isGameFinished() {
        return isPlayerWin(player1) | isPlayerWin(player2);
    }

    method boolean isPlayerWin(Player p) {
        var int totalScore;
        let totalScore = Consts.rows() * Consts.columns();
        return p.getScore() > (totalScore / 2);
    }

    method void handleCursorMove(int key) {
        var Cell curCell, cursor;
        var Array row;
        var int color;

        let cursor = currentPlayer.getCursor();
        let curCell = Cell.new(cursor.getRow(), cursor.getColumn());

        let row = gameField[curCell.getRow()];
        let color = row[curCell.getColumn()];
        if (key = left) {
            do currentPlayer.move(0, -1);
        }
        if (key = up) {
            do currentPlayer.move(-1, 0);
        }
        if (key = right) {
            do currentPlayer.move(0, 1);
        }
        if (key = down) {
            do currentPlayer.move(1, 0);
        }

        if ((key = left) | (key = up) | (key = right) | (key = down)) {
            do FieldPainter.drawCursor(curCell, color, currentPlayer.getCursor());
        }

        return;
    }

    method void makeTurn() {
        var Cell selected1, selected2, curCell;
        var Array row;

        let curCell = selectCell(true);
        let selected1 = Cell.new(curCell.getRow(), curCell.getColumn());
        let row = gameField[selected1.getRow()];
        let row[selected1.getColumn()] = currentPlayer.getPlayerNum();

        do Sys.wait(200);

        let curCell = selectCell(false);
        let selected2 = Cell.new(curCell.getRow(), curCell.getColumn());
        let row = gameField[selected2.getRow()];
        let row[selected2.getColumn()] = currentPlayer.getPlayerNum();

        do createTerritory(selected1, selected2);

        return; 
    }

    method Cell selectCell(boolean isFirst) {
        var Cell curCell, cursor;
        var int key;

        while (true) {
            let key = Player.getKeyPressed();

            if (key = enter) {
                let curCell = currentPlayer.getCursor();
                if (isCellEmpty(curCell)) {
                    return curCell;
                }
            }

            do handleCursorMove(key);
            do Sys.wait(200);
        }

        return curCell;
    }

    method void drawDices(int dice1, int dice2) {
        do Menu.drawCubeNumber(0, dice1);
        do Menu.drawCubeNumber(1, dice2);

        return;
    }

    method boolean isCellEmpty(Cell cell) {
        var Array row;
        let row = gameField[cell.getRow()];
        return row[cell.getColumn()] = 0;
    }
}