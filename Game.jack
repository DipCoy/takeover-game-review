class Game {
    field Player player1, player2, currentPlayer;
    field Array gameField;
    field int enter, skip, up, down, left, right;
    field int moveCount;
    field Random rnd;

    constructor Game new(int seed) {
        var int i;

        let enter = 128;
        let skip = 83;
        let left = 130;
        let up = 131;
        let right = 132;
        let down = 133;

        let moveCount = 0;
        let rnd = Random.new(seed);

        let player1 = Player.new(1);
        let player2 = Player.new(2);
        let currentPlayer = player1;

        let gameField = Array.new(Consts.rows());

        let i = 0;
        while (i < Consts.rows()) {
            let gameField[i] = Array.new(Consts.columns());
            let i = i + 1;
        }

        do FieldPainter.drawEmptyField();

        do player1.drawScore();
        do player2.drawScore();
        
        return this;
    }

    method void start() {
        var int dice1, dice2;
        var Cell cursor;
        
        while (~isGameFinished()) {
            do Menu.drawPlayer(currentPlayer.getPlayerNum());

            let dice1 = rnd.next(6) + 1;
            let dice2 = rnd.next(6) + 1;

            do Sys.wait(200);

            do drawDices(dice1, dice2);
            do makeTurn(dice1, dice2);
            do changePlayer();

            do Sys.wait(200);
        }

        return;
    }

    method boolean isGameFinished() {
        return isPlayerWin(player1) | isPlayerWin(player2);
    }

    method boolean isPlayerWin(Player p) {
        var int totalScore;
        let totalScore = Consts.rows() * Consts.columns();
        return p.getScore() > (totalScore / 2);
    }

    method void makeTurn(int dice1, int dice2) {
        var Cell selected1, selected2, cursor;
        var Array row;
        var bool moveSkipped, moveDone;

        let cursor = currentPlayer.getCursor();

        while (~(moveDone)) {
            do FieldPainter.drawCursor(cursor);

            let selected1 = Cell.new(0, 0);
            let selected2 = 0;
            let moveSkipped = trySetSelectedCell(selected1, 0);
            if (moveSkipped) {
                do FieldPainter.printMessage("skipped1");
                do deleteCursor(cursor);
                return;
            }

            do Sys.wait(200);

            let selected2 = Cell.new(0, 0);
            let moveSkipped = trySetSelectedCell(selected2, selected1);
            if (moveSkipped) {
                do FieldPainter.printMessage("skipped2");
                do deleteCursor(cursor);
                do deleteCursor(selected1);
                return;
            }

            do deleteCursor(selected1);
            do deleteCursor(selected2);

            if (true) {
                do createTerritory(selected1, selected2);
                return;
            }

            do Sys.wait(1000);
        }

        return; 
    }

    method boolean trySetSelectedCell(Cell outResult, Cell alreadySelected) {
        var int key;
        var Cell cursor;

        while (true) {
            let key = Player.getKeyPressed();
            
            if (key = skip) {
                return true;
            }

            if (key = enter) {
                let cursor = currentPlayer.getCursor();
                if (isCellEmpty(cursor)) {
                    do outResult.setRow(cursor.getRow());
                    do outResult.setColumn(cursor.getColumn());
                    return false;
                }
            }

            do handleArrowsKeys(key, alreadySelected);

            do Sys.wait(200);
        }

        return false;
    }

    method void handleArrowsKeys(int key, Cell alreadySelected) {
        if (key = left) {
            do moveCursor(0, -1, alreadySelected);
        }
        if (key = up) {
            do moveCursor(-1, 0, alreadySelected);
        }
        if (key = right) {
            do moveCursor(0, 1, alreadySelected);
        }
        if (key = down) {
            do moveCursor(1, 0, alreadySelected);
        }

        return;
    }

    method void moveCursor(int deltaRow, int deltaColumn, Cell alreadySelected) {
        var Cell cursor;

        let cursor = currentPlayer.getCursor();
        
        do deleteCursor(cursor);
        do currentPlayer.move(deltaRow, deltaColumn);
        do FieldPainter.drawCursor(cursor);

        if (~(alreadySelected = 0)) {
            do FieldPainter.drawCursor(alreadySelected);
        }

        return;
    }

    method void drawDices(int dice1, int dice2) {
        do Menu.drawCubeNumber(0, dice1);
        do Menu.drawCubeNumber(1, dice2);

        return;
    }

    method boolean isCellEmpty(Cell cell) {
        var Array row;
        let row = gameField[cell.getRow()];
        return row[cell.getColumn()] = 0;
    }

    method void changePlayer() {
        if (currentPlayer.getPlayerNum() = 1) {
            let currentPlayer = player2;
        } else {
            let currentPlayer = player1;
        }

        return;
    }

    method void deleteCursor(Cell cursor) {
        var Array row;
        var int territoryColor;

        if (cursor = 0) {
            return;
        }

        let row = gameField[cursor.getRow()];
        let territoryColor = row[cursor.getColumn()];

        do FieldPainter.drawTerritory(cursor.getRow(), cursor.getColumn(), territoryColor);

        return;
    }

    method void createTerritory(Cell c1, Cell c2) {
        var int i1, i2, j1, j2, j;
        var int color;
        var Array row;

        if (c1.getRow() > c2.getRow()) {
            let i1 = c2.getRow();
            let i2 = c1.getRow();
        } else {
            let i1 = c1.getRow();
            let i2 = c2.getRow();
        }

        if (c1.getColumn() > c2.getColumn()) {
            let j1 = c2.getColumn();
            let j2 = c1.getColumn();
        } else {
            let j1 = c1.getColumn();
            let j2 = c2.getColumn();
        }

        do currentPlayer.addScore((i2 - i1 + 1) * (j2 - j1 + 1));

        let color = currentPlayer.getPlayerNum();

        while (i1 < (i2 + 1)) {
            let row = gameField[i1];
            let j = j1;
            while (j < (j2 + 1)) {
                let row[j] = color;
                do FieldPainter.drawTerritory(i1, j, color);
                let j = j + 1;
            }
            let i1 = i1 + 1;
        }

        return;
    }
}